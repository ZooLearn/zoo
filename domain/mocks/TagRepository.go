// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ZooLearn/zoo/domain"
	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, tag
func (_m *TagRepository) Create(c context.Context, tag domain.Tag) error {
	ret := _m.Called(c, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Tag) error); ok {
		r0 = rf(c, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: c, tagID
func (_m *TagRepository) Delete(c context.Context, tagID uint64) error {
	ret := _m.Called(c, tagID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(c, tagID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: c, r
func (_m *TagRepository) Fetch(c context.Context, r domain.FetchTagRequest) ([]domain.Tag, *domain.Pagination, error) {
	ret := _m.Called(c, r)

	var r0 []domain.Tag
	var r1 *domain.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.FetchTagRequest) ([]domain.Tag, *domain.Pagination, error)); ok {
		return rf(c, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.FetchTagRequest) []domain.Tag); ok {
		r0 = rf(c, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.FetchTagRequest) *domain.Pagination); ok {
		r1 = rf(c, r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.FetchTagRequest) error); ok {
		r2 = rf(c, r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchAll provides a mock function with given fields: c
func (_m *TagRepository) FetchAll(c context.Context) ([]domain.Tag, error) {
	ret := _m.Called(c)

	var r0 []domain.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Tag, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Tag); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: c, tagID
func (_m *TagRepository) GetByID(c context.Context, tagID uint64) (*domain.Tag, error) {
	ret := _m.Called(c, tagID)

	var r0 *domain.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*domain.Tag, error)); ok {
		return rf(c, tagID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *domain.Tag); ok {
		r0 = rf(c, tagID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(c, tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, tag
func (_m *TagRepository) Update(c context.Context, tag domain.Tag) error {
	ret := _m.Called(c, tag)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Tag) error); ok {
		r0 = rf(c, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTagRepository creates a new instance of TagRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTagRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TagRepository {
	mock := &TagRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
